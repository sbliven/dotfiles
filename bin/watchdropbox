#!/usr/bin/env bash
# vim: set filetype=sh
#
# This script is intended to be run as a cron job.
#
# It checks a directory and copies changes (if any) to another directory.
# If the copy was successful, (eg the results match), deletes the original
# file.
#
# This behavior is useful for keeping a dropbox empty. In the case where files
# are still syncing, the copy will result in a truncated version, so the
# original will not be deleted. Thus, the next run can fix the mistake.
#

# Associative arrays require bash 4
[ -n "$BASH_VERSION" ] && [[ BASH_VERSINFO -ge 4 ]] || {
    echo "You need bash version 4.0 or newer to run this script." >&2
    exit 1
}

SRC="/Users/blivens/Documents/Dropbox/fromPJK"
DST="/Users/blivens/Movies/fromPJK"

CP="/bin/cp"
RM="echo /bin/rm"
SLEEP=/bin/sleep
GN=/usr/local/bin/growlnotify
LN=/bin/ln

SLEEP_TIME=10
MIN_SIZE=1000

# List of files to ignore. Stored as an associative array
declare -A EXCLUDE_FILES
EXCLUDE_FILES=(["Icon"]=  ["Spencer Movie List.txt"]= )
#EXCLUDE_FILES=(["Icon"]=  ["Spencer"]= )

function notify() {
    $GN --sticky --name "$0" --identifier "$0" \
        --message "New Videos copied from Dropbox${1+: }${1}" \
        --priority "Normal" --title "$(basename "$0")"
}

#echo "Excluded:"
#for file in "${!EXCLUDE_FILES[@]}"; do echo "  $file"; done

cd "$SRC"

for file in *; do
    if [ ! -z "${EXCLUDE_FILES["$file"]+x}" ]; then
        #echo "Ignoring $file"
        continue
    fi

    #TODO handle dirs
    if [[ -d "$file" ]]; then
        echo "Error: Recursion into directories not implemented by $0" >&2

    # Copy the file, if needed
    elif [[ -f "$file" &&
        $(stat -f%z "$file") > $MIN_SIZE ]] &&
        ( [[ ! -f "$DST/$file" ]] || ! diff -q "$file" "$DST/$file" >/dev/null 2>&1 )
    then
        echo Copying "$file"
        $CP "$file" "$DST/$file" &
    else
        echo Didnt copy "$file" to "$DST/$file"
    fi
done

# All copies to finish, and then wait a few seconds to allow other processes to
# flush updated files
wait
$SLEEP $SLEEP_TIME

# Delete the source if it was copied successfully
for file in *; do
    if [ ! -z "${EXCLUDE_FILES["$file"]+x}" ]; then
        continue
    fi

    if [[ -f "$DST/$file" && 
        $(stat -f%z "$file") > $MIN_SIZE ]] &&
        diff -q "$file" "$DST/$file" >/dev/null 2>&1
    then
        notify "$file"
        $RM "$file"
    fi
done

