# ~/.profile.local
# Created by Spencer Bliven
#
# This contains settings specifice to the configuration of my MacBook Pro (Isabelle.local).

/opt/local/bin/fortune

# SET UP PATHS
# Lower entries are searched first
# Fink
test -r /sw/bin/init.sh && /sw/bin/init.sh
# MacPorts
if [ -d /opt ]; then
    PATH="/opt/local/bin:/opt/local/sbin:$PATH"
    MANPATH="/opt/local/share/man:$MANPATH"
    
#    pyVersion=$(python -c "import sys; print sys.version[:3]")
#    pyDir="/opt/local/Library/Frameworks/Python.framework/Versions/$pyVersion"
#    if [[ -e "$pyDir" ]]; then
#        PYTHONPATH="$pyDir/bin:$PYTHONPATH"
#        PYTHONPATH="$pyDir/lib/python$pyVersion:$PYTHONPATH"
#        PYTHONPATH="$pyDir/lib/python$pyVersion/site-packages:$PYTHONPATH"
#        PYTHONPATH="$pyDir/lib/python$pyVersion/site-packages/Numeric:$PYTHONPATH"
#        PYTHONPATH="$pyDir/lib/python$pyVersion/site-packages/PIL:$PYTHONPATH"
#        PYTHONPATH="$pyDir/lib/python$pyVersion/site-packages/PyObjC:$PYTHONPATH"
#        PYTHONPATH="$pyDir/lib/python$pyVersion/site-packages/gtk-2.0:$PYTHONPATH"
#        PYTHONPATH="$pyDir/lib/python$pyVersion/lib-dynload:$PYTHONPATH"
#        PYTHONPATH="$pyDir/lib/python$pyVersion/plat-darwin:$PYTHONPATH"
#        PYTHONPATH="$pyDir/lib/python$pyVersion/plat-mac:$PYTHONPATH"

#        for d in "$pyDir/lib/python$pyVersion/"*; do
#            if [[ -d "$d" ]]; then
#                echo "$d:"; pause
#                PYTHONPATH="$pyDir/$d:$PYTHONPATH"
#                for d2 in "$d/"*; do
#                    if [[ -d "$d" ]]; then
#                        PYTHONPATH="$pyDir/$d:$PYTHONPATH"
#                    fi
#                done
#            fi
#        done

#    fi
    function python_select {
        sudo port select --set python python$1 &&
            sudo port select --set ipython ipython$1 ||
            port select --list python
    }
fi
#Custom installs
PATH="/usr/local/sbin:$PATH"
MANPATH="/usr/local/man/:$MANPATH"
# sage
PATH="/usr/local/sage:$PATH"
MANPATH="/usr/local/sage/local/share/man:$MANPATH"
#PYTHONPATH="/usr/local/sage/devel/sage/:/usr/local/sage/devel/sage/sage/:$PYTHONPATH"
# MySQL
PATH="/usr/local/mysql/bin:$PATH"
MANPATH="/usr/local/mysql/man:$MANPATH"
# GROMACS
PATH="/opt/local/lib/gromacs/bin:$PATH"
export GMXLIB="/opt/local/share/gromacs/top"
# VMD
VMD_DIR="$(echo "/Applications/_science/VMD/VMD "*".app/Contents/vmd")"
if [[ -e "$VMD_DIR" ]]; then
    PATH="$VMD_DIR:$PATH"
    alias vmd="\"$VMD_DIR/vmd_MACOSXX86\""
    alias stride="$VMD_DIR/stride_MACOSXX86"
    alias surf="$VMD_DIR/surf_MACOSXX86"
    alias tachyon="$VMD_DIR/tachyon_MACOSXX86"
fi
#unset VMD_DIR
#PyMOL
PYTHONPATH="/opt/local/lib/pymol/modules:$PYTHONPATH"
#CINT
CINTSYSDIR=/usr/local/
export CINTSYSDIR
#LD_LIBRARY_PATH=.:$CINTSYSDIR:$LD_LIBRARY_PATH
#export LD_LIBRARY_PATH

#UbiGraph
if [ -d /usr/local/UbiGraph ]; then
    PATH="/usr/local/UbiGraph/bin:$PATH"
    PYTHONPATH="/usr/local/UbiGraph/examples/Python:$PYTHONPATH"
fi


# home directory
PATH="$HOME/bin:$PATH"
PYTHONPATH="$HOME/bin:$PYTHONPATH"
MANPATH="$HOME/home:$MANPATH"
# current directory
PATH=".:$PATH:./bin"
MANPATH="$MANPATH:./man"
export PATH MANPATH
export PYTHONPATH

alias deepsleep='"/Users/blivens/Library/Widgets/Deep Sleep.wdgt/deepsleep"'

alias sethostname='sudo scutil --set HostName isabelle.local'

#Override checknet function
function checknet {
    if ! ping -c 1 -t 1 $googleIP; then
        timeout=1 #double each check
        sleep $timeout
        echo -n "${timeout}: ";date
        {
            while ! ping -c 1 -t 1 $googleIP; do
                ((timeout*=2))
                sleep $timeout
                echo -n "${timeout}: ";date
            done 2>&1 |egrep '^PING|bytes from'
        } &&
        date &&
        if [[ -e $(which growlnotify) ]]; then
            growlnotify -s -n "checknet" -t "checknet" \
                -m 'Internet Service has resumed'
        fi
    fi
}


# media
alias qtpresent="osascript -e 'tell application \"QuickTime Player\" to present movie 1.0'"
function mp_nice {
    for p in `ps -Awwo pid,command |egrep -i 'mplayer|vlc' |grep -v 'grep'|awk '{print $1}'`
    do
        sudo renice -10 "$p"
    done
}

#alias svn1.4-diff='svn1.4 diff --diff-cmd fmdiff'
#alias svn1.6-diff='svn1.6 diff --diff-cmd fmdiff'
alias svn-diff='svn diff --diff-cmd fmdiff'

#function svn {
#    read -p "SVN version 1.[4]:" version
#    "svn1.${version:-4}" "$@"
#}

# Prompt Color
# 31    Red     Default
# 32    Green   Local Machines
# 33    Yellow
# 34    Blue    CSE Machines
# 35    Magenta
# 36    Cyan
#
export PS1_COLOR="32"


#ssh-agent start
#SSH_ENV=$HOME/.ssh/environment

#function start_agent {
#    echo "Initialising new SSH agent..."
#    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > ${SSH_ENV}
#    echo succeeded
#    chmod 600 ${SSH_ENV}
#    . ${SSH_ENV} > /dev/null
#    /usr/bin/ssh-add;
#}

# Source SSH settings, if applicable

#if [ -f "${SSH_ENV}" ]; then
#    . ${SSH_ENV} > /dev/null
#    ps -ecA | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
#        start_agent;
#    }
#else
#    start_agent;
#fi


#Finder control
alias showHiddenFiles='defaults write com.apple.finder AppleShowAllFiles TRUE; killall Finder'
alias hideHiddenFiles='defaults write com.apple.finder AppleShowAllFiles FALSE; killall Finder'
alias enableRemoteDisk='defaults write com.apple.NetworkBrowser EnableODiskBrowsing -bool true; defaults write com.apple.NetworkBrowser ODSSupported -bool true; killall Finder'
alias disableRemoteDisk='defaults write com.apple.NetworkBrowser EnableODiskBrowsing -bool false; defaults write com.apple.NetworkBrowser ODSSupported -bool false; killall Finder'


alias mcbackup='/Users/blivens/Library/Application\ Support/minecraft/mcbackup.sh'

alias Xpra='/Applications/_dev/Xpra.app/Contents/MacOS/Xpra'
alias Xpra_pi='/Applications/_dev/Xpra.app/Contents/MacOS/Xpra attach --encoding=png ssh:pi@192.168.2.17'

# Workaround for gvim warnings
#function gvim {
#    { $(which gvim) "$@"; } 3>&2 2>&1 1>&3 |
#        grep -v 'Xlib:  extension "RANDR" missing on display' 3>&2 2>&1 1>&3 &
#}

#cdargs
. /opt/local/etc/profile.d/cdargs-bash.sh


# Maybe start screen?
if [[ ! $STY && -x `which screen` && ! "ENABLE" ]] ; then
    screen -xRR
fi

#Count lines of c++ files
function code_count {
    for f in "$1"/*; do
        if [[ -d "$f" ]]; then
            #echo "Recursing $f" 1>&2
            code_count "$f"
        fi
    done
    cat "$1"/*.cc "$1"/*.hh 2>/dev/null
}

#Forward ssh connections through a firewall
function fw {
    USAGE=$(cat<<'END'
fw firewall destination [port]
fw alias

Generate an ssh tunnel through a firewall & connect through it to the destination.
Port refers the local port devoted to the tunnel. Only one tunnel may be generated per port.
Alias refers to a named tunnel, named in .ssh/tunnels
END
    )
    if [[ ! "$#" =~ [1-3] || "$1" == "-h" || "$1" == "--help" ]]; then
        echo "$USAGE" >&2
        return 70
    fi

    TUNNELS=~/.ssh/tunnels

    if [[ "$#" == 1 ]]; then #alias mode
        TUNNEL=$(egrep -i "^$1	" $TUNNELS 2>/dev/null )
        if [[ $TUNNEL == "" ]]; then
            echo "Tunnel $1 not found in $TUNNELS." >&2
            return 2
        fi
        FW=$(echo $TUNNEL|awk '{print $2}')
        DEST=$(echo $TUNNEL|awk '{print $3}')
        PORT=$(echo $TUNNEL|awk '{print $4}')
    else 
        FW="$1"
        DEST="$2"
        PORT="${3:-2222}"
    fi

    #echo "FW=$FW"
    #echo "DEST=$DEST"
    #echo "PORT=$PORT"

    # Create tunnel & establish a connection through.
    # Tunnel will close when the last connection through it closes.
    ssh -f -L $PORT:${DEST##*@}:22 $FW 'sleep 10' &&
        ssh -p $PORT -l "${DEST%%@*}" 127.0.0.1
}



#Fix urls in my bibliography
function sanitizeBibliography {
    #TODO add options for /url{} wrapping, Quotes, other files,
    tmpFile="/tmp/Papers.bib"
    bibFile="${1:-$HOME/Documents/Papers.bib}"
    probLines="$(nl "$bibFile"|egrep '\= *\{[^}]*$' )"
    if [[ $probLines != "" ]]; then
        echo "Unclosed braces:"
        echo "$probLines"
        return
    fi
    egrep -iv '^[ \t]*(url|uri|local-url|doi|pmid|rating|note|annote) *=' "$bibFile" |
        sed -E 's/^([ \t]*title[ \t]*=[ \t]*)(\{.*\})([ \t]*,[ \t]*)$/\1"\2"\3/' \
        > "$tmpFile"
    mv "$tmpFile" "$bibFile"
}

function showCA {
    (
        pdbID="$1"
        chain="${2:-_}"
        resiRegex="${3:-"[^ ]+"}"
        atomRegex="${4:-CA}"

        if [[ _ = $chain ]]; then
            chain="."
        fi

        regex="^ATOM  .{$((12-7))}  *${atomRegex} *.?[A-Z]{3} ${chain} *${resiRegex} *[^ ]? .*$"
        pdbURL="http://www.rcsb.org/pdb/files/${pdbID}.pdb"
        
        cd "$HOME/pdb"

        if [[ ! -e "${pdbID}.pdb" ]]; then
            wget  "$pdbURL"
        fi

        #echo "egrep \"$regex\" \"${pdbID}.pdb\""
        egrep "$regex" "${pdbID}.pdb"
    )
}

function trackfile {
    # usage: trackfile file [timestep]
    file="${1}"
    sleepTime="${2:-30}"
    prevWC=-1
    nextWC="$(cat "$file"|wc -l)"
    while (( nextWC > prevWC )); do
        echo "$nextWC"
        sleep "$sleepTime"
        prevWC="$nextWC"
        nextWC="$(cat "$file"|wc -l)"
    done
}

function c {
   echo "$@" | bc -l
}

function pdbNumber {
    sed -nE 's/^ATOM.{9}CA  (...) (.) *([^ ]+).*$/\1  \2      \3/p;/^ENDMDL/q' "$@"
}

# number headers
function nh {
    #echo "$# params:"
    #for p in "$@"; do echo "'$p'"; done

    local multiHeader=$(( $# > 1 ))
    while (( $# > 0 )); do 
        if (( $multiHeader )); then
            echo "$1:"
        fi
        head  -1 "$1" | tr $'\t' $'\n' | nl

        shift #|| { echo break && break; }
    done
}

