# ~/.profile.local
# Created by Spencer Bliven
#
# This contains settings specifice to the configuration of my MacBook Pro (Isabelle.local).

/opt/local/bin/fortune

# SET UP PATHS
# Lower entries are searched first
# Fink
test -r /sw/bin/init.sh && /sw/bin/init.sh
# MacPorts
if [ -d /opt ]; then
    PATH="/opt/local/bin:/opt/local/sbin:$PATH"
    MANPATH="/opt/local/share/man:$MANPATH"
fi
#Custom installs
PATH="/usr/local/sbin:$PATH"
MANPATH="/usr/local/man/:$MANPATH"
# sage
PATH="/usr/local/sage:$PATH"
MANPATH="/usr/local/sage/local/share/man:$MANPATH"
#PYTHONPATH="/usr/local/sage/devel/sage/:/usr/local/sage/devel/sage/sage/:$PYTHONPATH"
# MySQL
PATH="/usr/local/mysql/bin:$PATH"
MANPATH="/usr/local/mysql/man:$MANPATH"
# home directory
PATH="~/bin:$PATH"
MANPATH="~/home:$MANPATH"
# current directory
PATH=".:bin:$PATH"
MANPATH="man:$MANPATH"
export PATH MANPATH
export PYTHONPATH

alias deepsleep='"/Users/blivens/Library/Widgets/Deep Sleep.wdgt/deepsleep"'

alias sethostname='sudo scutil --set HostName isabelle.local'

#Override checknet function
function checknet {
    if ! ping -c 1 -t 1 $googleIP; then
        timeout=1 #double each check
        sleep $timeout
        echo -n "${timeout}: ";date
        {
            while ! ping -c 1 -t 1 $googleIP; do
                ((timeout*=2))
                sleep $timeout
                echo -n "${timeout}: ";date
            done 2>&1 |egrep '^PING|bytes from'
        } &&
        date &&
        if [[ -e $(which growlnotify) ]]; then
            growlnotify -s -n "checknet" -t "checknet" \
                -m 'Internet Service has resumed'
        fi
    fi
}


# media
alias qtpresent="osascript -e 'tell application \"QuickTime Player\" to present movie 1.0'"
function mp_nice {
    for p in `ps -Awwo pid,command |egrep -i 'mplayer|vlc' |grep -v 'grep'|awk '{print $1}'`
    do
        sudo renice -10 "$p"
    done
}

#alias svn1.4-diff='svn1.4 diff --diff-cmd fmdiff'
#alias svn1.6-diff='svn1.6 diff --diff-cmd fmdiff'
alias svn-diff='svn diff --diff-cmd fmdiff'

#function svn {
#    read -p "SVN version 1.[4]:" version
#    "svn1.${version:-4}" "$@"
#}

# Prompt Color
# 31    Red     Default
# 32    Green   Local Machines
# 33    Yellow
# 34    Blue    CSE Machines
# 35    Magenta
# 36    Cyan
#
export PS1_COLOR="32"


#ssh-agent start
#SSH_ENV=$HOME/.ssh/environment

#function start_agent {
#    echo "Initialising new SSH agent..."
#    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > ${SSH_ENV}
#    echo succeeded
#    chmod 600 ${SSH_ENV}
#    . ${SSH_ENV} > /dev/null
#    /usr/bin/ssh-add;
#}

# Source SSH settings, if applicable

#if [ -f "${SSH_ENV}" ]; then
#    . ${SSH_ENV} > /dev/null
#    ps -ecA | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
#        start_agent;
#    }
#else
#    start_agent;
#fi


#Finder control
alias showHiddenFiles='defaults write com.apple.finder AppleShowAllFiles TRUE; killall Finder'
alias hideHiddenFiles='defaults write com.apple.finder AppleShowAllFiles FALSE; killall Finder'

# Workaround for gvim warnings
function gvim {
    { $(which gvim) "$@"; } 3>&2 2>&1 1>&3 |
        grep -v 'Xlib:  extension "RANDR" missing on display' 3>&2 2>&1 1>&3 &
}

#cdargs
. /opt/local/etc/profile.d/cdargs-bash.sh


# Maybe start screen?
if [[ ! $STY && -x `which screen` && ! "ENABLE" ]] ; then
    screen -xRR
fi

#Count lines of c++ files
function code_count {
    for f in "$1"/*; do
        if [[ -d "$f" ]]; then
            #echo "Recursing $f" 1>&2
            code_count "$f"
        fi
    done
    cat "$1"/*.cc "$1"/*.hh 2>/dev/null
}

#Forward ssh connections through the baker firewall
function baker_fw {
    ssh -L 2200:dig30:22 -l blivens fw.bakerlab.org -N
}
